{"ast":null,"code":"var _jsxFileName = \"/Users/dariuscooly/metamaskapp/src/ConnectButton.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { BrowserProvider } from 'ethers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ConnectButton() {\n  _s();\n  const [address, setAddress] = useState(null);\n\n  // Function to connect to MetaMask\n  const connectToMetaMask = async () => {\n    if (window.ethereum) {\n      try {\n        // Request account access from MetaMask\n        await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n\n        // Create a provider instance\n        const provider = new BrowserProvider(window.ethereum);\n        const signer = await provider.getSigner();\n\n        // Get the user's address and save it\n        const userAddress = await signer.getAddress();\n        setAddress(userAddress);\n\n        // Store the address in localStorage\n        localStorage.setItem('walletAddress', userAddress);\n      } catch (error) {\n        console.error('Connection error:', error);\n      }\n    } else {\n      alert('MetaMask not detected. Please install MetaMask!');\n    }\n  };\n\n  // Effect to load address from localStorage on component mount\n  useEffect(() => {\n    const savedAddress = localStorage.getItem('walletAddress');\n    if (savedAddress) {\n      setAddress(savedAddress);\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: connectToMetaMask,\n    children: address ? `Connected: ${address}` : 'Connect to MetaMask'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n_s(ConnectButton, \"xZ0QtoNlbd44okCw04/b87y81Yo=\");\n_c = ConnectButton;\nexport default ConnectButton;\nvar _c;\n$RefreshReg$(_c, \"ConnectButton\");","map":{"version":3,"names":["React","useState","useEffect","BrowserProvider","jsxDEV","_jsxDEV","ConnectButton","_s","address","setAddress","connectToMetaMask","window","ethereum","request","method","provider","signer","getSigner","userAddress","getAddress","localStorage","setItem","error","console","alert","savedAddress","getItem","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/dariuscooly/metamaskapp/src/ConnectButton.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { BrowserProvider } from 'ethers';\n\nfunction ConnectButton() {\n  const [address, setAddress] = useState(null);\n\n  // Function to connect to MetaMask\n  const connectToMetaMask = async () => {\n    if (window.ethereum) {\n      try {\n        // Request account access from MetaMask\n        await window.ethereum.request({ method: 'eth_requestAccounts' });\n        \n        // Create a provider instance\n        const provider = new BrowserProvider(window.ethereum);\n        const signer = await provider.getSigner();\n        \n        // Get the user's address and save it\n        const userAddress = await signer.getAddress();\n        setAddress(userAddress);\n\n        // Store the address in localStorage\n        localStorage.setItem('walletAddress', userAddress);\n      } catch (error) {\n        console.error('Connection error:', error);\n      }\n    } else {\n      alert('MetaMask not detected. Please install MetaMask!');\n    }\n  };\n\n  // Effect to load address from localStorage on component mount\n  useEffect(() => {\n    const savedAddress = localStorage.getItem('walletAddress');\n    if (savedAddress) {\n      setAddress(savedAddress);\n    }\n  }, []);\n\n  return (\n    <button onClick={connectToMetaMask}>\n      {address ? `Connected: ${address}` : 'Connect to MetaMask'}\n    </button>\n  );\n}\n\nexport default ConnectButton;\n\n\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,eAAe,QAAQ,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzC,SAASC,aAAaA,CAAA,EAAG;EAAAC,EAAA;EACvB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;;EAE5C;EACA,MAAMS,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IACpC,IAAIC,MAAM,CAACC,QAAQ,EAAE;MACnB,IAAI;QACF;QACA,MAAMD,MAAM,CAACC,QAAQ,CAACC,OAAO,CAAC;UAAEC,MAAM,EAAE;QAAsB,CAAC,CAAC;;QAEhE;QACA,MAAMC,QAAQ,GAAG,IAAIZ,eAAe,CAACQ,MAAM,CAACC,QAAQ,CAAC;QACrD,MAAMI,MAAM,GAAG,MAAMD,QAAQ,CAACE,SAAS,CAAC,CAAC;;QAEzC;QACA,MAAMC,WAAW,GAAG,MAAMF,MAAM,CAACG,UAAU,CAAC,CAAC;QAC7CV,UAAU,CAACS,WAAW,CAAC;;QAEvB;QACAE,YAAY,CAACC,OAAO,CAAC,eAAe,EAAEH,WAAW,CAAC;MACpD,CAAC,CAAC,OAAOI,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;MAC3C;IACF,CAAC,MAAM;MACLE,KAAK,CAAC,iDAAiD,CAAC;IAC1D;EACF,CAAC;;EAED;EACAtB,SAAS,CAAC,MAAM;IACd,MAAMuB,YAAY,GAAGL,YAAY,CAACM,OAAO,CAAC,eAAe,CAAC;IAC1D,IAAID,YAAY,EAAE;MAChBhB,UAAU,CAACgB,YAAY,CAAC;IAC1B;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEpB,OAAA;IAAQsB,OAAO,EAAEjB,iBAAkB;IAAAkB,QAAA,EAChCpB,OAAO,GAAG,cAAcA,OAAO,EAAE,GAAG;EAAqB;IAAAqB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpD,CAAC;AAEb;AAACzB,EAAA,CAzCQD,aAAa;AAAA2B,EAAA,GAAb3B,aAAa;AA2CtB,eAAeA,aAAa;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}