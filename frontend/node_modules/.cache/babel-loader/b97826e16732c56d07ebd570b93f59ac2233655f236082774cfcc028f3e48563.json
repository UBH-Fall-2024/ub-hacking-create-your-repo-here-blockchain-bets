{"ast":null,"code":"var _jsxFileName = \"/Users/leondanquah/BlockchainBets/ub-hacking-create-your-repo-here-blockchain-bets/frontend/src/WalletActions.js\",\n  _s = $RefreshSig$();\n// WalletActions.js\nimport React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport './WalletActions.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst contractAddress = '0x12e31C3ECD08d3b5C0775F623db3bdd7ec1e2931'; // Replace with your contract address\n\nfunction WalletActions() {\n  _s();\n  const [amount, setAmount] = useState('');\n  const [balance, setBalance] = useState('0');\n  const [refreshBalance, setRefreshBalance] = useState(false); // State to trigger balance refresh\n\n  useEffect(() => {\n    if (window.ethereum) {\n      fetchBalance();\n    }\n  }, [refreshBalance]); // Watch for refreshBalance changes to update balance\n\n  const fetchBalance = async () => {\n    try {\n      const provider = new ethers.BrowserProvider(window.ethereum);\n      const contract = new ethers.Contract(contractAddress, [{\n        inputs: [{\n          internalType: 'address',\n          name: '',\n          type: 'address'\n        }],\n        name: 'balances',\n        outputs: [{\n          internalType: 'uint256',\n          name: '',\n          type: 'uint256'\n        }],\n        stateMutability: 'view',\n        type: 'function'\n      }], provider);\n      const signer = provider.getSigner();\n      const userAddress = await signer.getAddress();\n\n      // Fetch the user's balance from the contract\n      const userBalance = await contract.balances(userAddress);\n      setBalance(ethers.formatEther(userBalance));\n    } catch (error) {\n      console.error('Error fetching balance:', error);\n    }\n  };\n  const handleDeposit = async () => {\n    if (!amount) return alert('Please enter an amount to deposit.');\n    try {\n      const provider = new ethers.BrowserProvider(window.ethereum);\n      const signer = await provider.getSigner();\n      const contract = new ethers.Contract(contractAddress, [{\n        inputs: [],\n        name: 'deposit',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function'\n      }], signer);\n      const transaction = await contract.deposit({\n        value: ethers.parseEther(amount)\n      });\n      await transaction.wait();\n      alert('Deposit successful!');\n      setAmount('');\n      setRefreshBalance(!refreshBalance); // Trigger balance refresh\n    } catch (error) {\n      console.error('Deposit failed:', error);\n      alert('Deposit failed. Please check the transaction details or try again.');\n    }\n  };\n  const handleWithdraw = async () => {\n    if (!amount) return alert('Please enter an amount to withdraw.');\n    try {\n      const provider = new ethers.BrowserProvider(window.ethereum);\n      const signer = await provider.getSigner();\n      const contract = new ethers.Contract(contractAddress, [{\n        inputs: [{\n          internalType: 'uint256',\n          name: '_amount',\n          type: 'uint256'\n        }],\n        name: 'withdraw',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function'\n      }], signer);\n      const tx = await contract.withdraw(ethers.parseEther(amount));\n      await tx.wait();\n      alert('Withdrawal successful!');\n      setAmount('');\n      setRefreshBalance(!refreshBalance); // Trigger balance refresh\n    } catch (error) {\n      console.error('Withdrawal failed:', error);\n      alert('Withdrawal failed. Please check the transaction details or try again.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"wallet-actions\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Current Balance: \", balance, \" ETH\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter amount (ETH)\",\n      value: amount,\n      onChange: e => setAmount(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleDeposit,\n      children: \"Deposit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleWithdraw,\n      children: \"Withdraw\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n}\n_s(WalletActions, \"SWZsJddQ2vfP+O0Sedx38OBKHXI=\");\n_c = WalletActions;\nexport default WalletActions;\nvar _c;\n$RefreshReg$(_c, \"WalletActions\");","map":{"version":3,"names":["React","useState","useEffect","ethers","jsxDEV","_jsxDEV","contractAddress","WalletActions","_s","amount","setAmount","balance","setBalance","refreshBalance","setRefreshBalance","window","ethereum","fetchBalance","provider","BrowserProvider","contract","Contract","inputs","internalType","name","type","outputs","stateMutability","signer","getSigner","userAddress","getAddress","userBalance","balances","formatEther","error","console","handleDeposit","alert","transaction","deposit","value","parseEther","wait","handleWithdraw","tx","withdraw","className","children","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["/Users/leondanquah/BlockchainBets/ub-hacking-create-your-repo-here-blockchain-bets/frontend/src/WalletActions.js"],"sourcesContent":["// WalletActions.js\nimport React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport './WalletActions.css';\n\nconst contractAddress = '0x12e31C3ECD08d3b5C0775F623db3bdd7ec1e2931'; // Replace with your contract address\n\nfunction WalletActions() {\n  const [amount, setAmount] = useState('');\n  const [balance, setBalance] = useState('0');\n  const [refreshBalance, setRefreshBalance] = useState(false); // State to trigger balance refresh\n\n  useEffect(() => {\n    if (window.ethereum) {\n      fetchBalance();\n    }\n  }, [refreshBalance]); // Watch for refreshBalance changes to update balance\n\n  const fetchBalance = async () => {\n    try {\n      const provider = new ethers.BrowserProvider(window.ethereum);\n      const contract = new ethers.Contract(contractAddress, [\n        {\n          inputs: [{ internalType: 'address', name: '', type: 'address' }],\n          name: 'balances',\n          outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n          stateMutability: 'view',\n          type: 'function'\n        }\n      ], provider);\n\n      const signer = provider.getSigner();\n      const userAddress = await signer.getAddress();\n\n      // Fetch the user's balance from the contract\n      const userBalance = await contract.balances(userAddress);\n      setBalance(ethers.formatEther(userBalance));\n    } catch (error) {\n      console.error('Error fetching balance:', error);\n    }\n  };\n\n  const handleDeposit = async () => {\n    if (!amount) return alert('Please enter an amount to deposit.');\n\n    try {\n      const provider = new ethers.BrowserProvider(window.ethereum);\n      const signer = await provider.getSigner();\n\n      const contract = new ethers.Contract(contractAddress, [\n        {\n          inputs: [],\n          name: 'deposit',\n          outputs: [],\n          stateMutability: 'payable',\n          type: 'function'\n        }\n      ], signer);\n\n      const transaction = await contract.deposit({ value: ethers.parseEther(amount) });\n      await transaction.wait();\n      alert('Deposit successful!');\n      setAmount('');\n      setRefreshBalance(!refreshBalance); // Trigger balance refresh\n    } catch (error) {\n      console.error('Deposit failed:', error);\n      alert('Deposit failed. Please check the transaction details or try again.');\n    }\n  };\n\n  const handleWithdraw = async () => {\n    if (!amount) return alert('Please enter an amount to withdraw.');\n\n    try {\n      const provider = new ethers.BrowserProvider(window.ethereum);\n      const signer = await provider.getSigner();\n\n      const contract = new ethers.Contract(contractAddress, [\n        {\n          inputs: [{ internalType: 'uint256', name: '_amount', type: 'uint256' }],\n          name: 'withdraw',\n          outputs: [],\n          stateMutability: 'nonpayable',\n          type: 'function'\n        }\n      ], signer);\n\n      const tx = await contract.withdraw(ethers.parseEther(amount));\n      await tx.wait();\n      alert('Withdrawal successful!');\n      setAmount('');\n      setRefreshBalance(!refreshBalance); // Trigger balance refresh\n    } catch (error) {\n      console.error('Withdrawal failed:', error);\n      alert('Withdrawal failed. Please check the transaction details or try again.');\n    }\n  };\n\n  return (\n    <div className=\"wallet-actions\">\n      <p>Current Balance: {balance} ETH</p>\n      <input\n        type=\"text\"\n        placeholder=\"Enter amount (ETH)\"\n        value={amount}\n        onChange={(e) => setAmount(e.target.value)}\n      />\n      <button onClick={handleDeposit}>Deposit</button>\n      <button onClick={handleWithdraw}>Withdraw</button>\n    </div>\n  );\n}\n\nexport default WalletActions;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}