{"ast":null,"code":"var _jsxFileName = \"/Users/leondanquah/BlockchainBets/ub-hacking-create-your-repo-here-blockchain-bets/frontend/src/ConnectButton.js\",\n  _s = $RefreshSig$();\n// ConnectButton.js\nimport React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\n// ConnectButton.js\nimport PaymentContractABI from './PaymentContract.json';\nimport './ConnectButton.css'; // Import the CSS file\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst contractAddress = '0x12e31C3ECD08d3b5C0775F623db3bdd7ec1e2931'; // Replace with deployed contract address\n\nfunction ConnectButton({\n  onWalletConnect\n}) {\n  _s();\n  const [address, setAddress] = useState(null);\n  const [contract, setContract] = useState(null);\n\n  // Function to connect to MetaMask\n  const connectToMetaMask = async () => {\n    if (window.ethereum) {\n      try {\n        // Request account access from MetaMask\n        await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n\n        // Create a provider and signer\n        const provider = new ethers.BrowserProvider(window.ethereum);\n        const signer = await provider.getSigner();\n\n        // Get the user's address and save it\n        const userAddress = await signer.getAddress();\n        setAddress(userAddress);\n\n        // Initialize the contract with the signer\n        const paymentContract = new ethers.Contract(contractAddress, PaymentContractABI.abi, signer);\n        setContract(paymentContract);\n\n        // Store the address in localStorage\n        localStorage.setItem('walletAddress', userAddress);\n\n        // Notify parent component of connection status\n        onWalletConnect(true);\n      } catch (error) {\n        console.error('Connection error:', error);\n      }\n    } else {\n      alert('MetaMask not detected. Please install MetaMask!');\n    }\n  };\n\n  // Function to disconnect and clear the wallet address\n  const disconnect = () => {\n    localStorage.removeItem('walletAddress');\n    setAddress(null);\n    setContract(null); // Clear the contract instance\n    onWalletConnect(false); // Notify parent component of disconnection\n  };\n\n  // Effect to load address from localStorage on component mount\n  useEffect(() => {\n    const savedAddress = localStorage.getItem('walletAddress');\n    if (savedAddress) {\n      setAddress(savedAddress);\n      onWalletConnect(true); // Restore connection status on page load\n    }\n  }, [onWalletConnect]);\n\n  // Function to deposit ETH into the contract\n  const handleDeposit = async () => {\n    if (contract) {\n      try {\n        const tx = await contract.deposit({\n          value: ethers.parseEther(\"0.1\")\n        }); // Adjust amount as needed\n        await tx.wait();\n        alert('Deposit successful!');\n      } catch (error) {\n        console.error('Deposit error:', error);\n        alert('Deposit failed. Please try again.');\n      }\n    } else {\n      alert('Contract not connected.');\n    }\n  };\n\n  // Function to withdraw ETH from the contract\n  const handleWithdraw = async () => {\n    if (contract) {\n      try {\n        const tx = await contract.withdraw();\n        await tx.wait();\n        alert('Withdrawal successful!');\n      } catch (error) {\n        console.error('Withdrawal error:', error);\n        alert('Withdrawal failed. Please try again.');\n      }\n    } else {\n      alert('Contract not connected.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"connect-button-container\",\n    children: address ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"connected-address\",\n        children: [\"Connected: \", address]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"connect-button\",\n        onClick: disconnect,\n        children: \"Disconnect\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"connect-button\",\n        onClick: handleDeposit,\n        children: \"Deposit 0.1 ETH\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"connect-button\",\n        onClick: handleWithdraw,\n        children: \"Withdraw\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"connect-button\",\n      onClick: connectToMetaMask,\n      children: \"Connect to MetaMask\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n}\n_s(ConnectButton, \"ubPGqy0b2XMvJrJdl+5owcqSaZQ=\");\n_c = ConnectButton;\nexport default ConnectButton;\nvar _c;\n$RefreshReg$(_c, \"ConnectButton\");","map":{"version":3,"names":["React","useState","useEffect","ethers","PaymentContractABI","jsxDEV","_jsxDEV","Fragment","_Fragment","contractAddress","ConnectButton","onWalletConnect","_s","address","setAddress","contract","setContract","connectToMetaMask","window","ethereum","request","method","provider","BrowserProvider","signer","getSigner","userAddress","getAddress","paymentContract","Contract","abi","localStorage","setItem","error","console","alert","disconnect","removeItem","savedAddress","getItem","handleDeposit","tx","deposit","value","parseEther","wait","handleWithdraw","withdraw","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/leondanquah/BlockchainBets/ub-hacking-create-your-repo-here-blockchain-bets/frontend/src/ConnectButton.js"],"sourcesContent":["  // ConnectButton.js\nimport React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\n// ConnectButton.js\nimport PaymentContractABI from './PaymentContract.json';\n\nimport './ConnectButton.css'; // Import the CSS file\n\nconst contractAddress = '0x12e31C3ECD08d3b5C0775F623db3bdd7ec1e2931'; // Replace with deployed contract address\n\nfunction ConnectButton({ onWalletConnect }) {\n  const [address, setAddress] = useState(null);\n  const [contract, setContract] = useState(null);\n\n  // Function to connect to MetaMask\n  const connectToMetaMask = async () => {\n    if (window.ethereum) {\n      try {\n        // Request account access from MetaMask\n        await window.ethereum.request({ method: 'eth_requestAccounts' });\n        \n        // Create a provider and signer\n        const provider = new ethers.BrowserProvider(window.ethereum);\n        const signer = await provider.getSigner();\n\n        // Get the user's address and save it\n        const userAddress = await signer.getAddress();\n        setAddress(userAddress);\n\n        // Initialize the contract with the signer\n        const paymentContract = new ethers.Contract(contractAddress, PaymentContractABI.abi, signer);\n        setContract(paymentContract);\n\n        // Store the address in localStorage\n        localStorage.setItem('walletAddress', userAddress);\n\n        // Notify parent component of connection status\n        onWalletConnect(true);\n      } catch (error) {\n        console.error('Connection error:', error);\n      }\n    } else {\n      alert('MetaMask not detected. Please install MetaMask!');\n    }\n  };\n\n  // Function to disconnect and clear the wallet address\n  const disconnect = () => {\n    localStorage.removeItem('walletAddress');\n    setAddress(null);\n    setContract(null); // Clear the contract instance\n    onWalletConnect(false); // Notify parent component of disconnection\n  };\n\n  // Effect to load address from localStorage on component mount\n  useEffect(() => {\n    const savedAddress = localStorage.getItem('walletAddress');\n    if (savedAddress) {\n      setAddress(savedAddress);\n      onWalletConnect(true); // Restore connection status on page load\n    }\n  }, [onWalletConnect]);\n\n  // Function to deposit ETH into the contract\n  const handleDeposit = async () => {\n    if (contract) {\n      try {\n        const tx = await contract.deposit({ value: ethers.parseEther(\"0.1\") }); // Adjust amount as needed\n        await tx.wait();\n        alert('Deposit successful!');\n      } catch (error) {\n        console.error('Deposit error:', error);\n        alert('Deposit failed. Please try again.');\n      }\n    } else {\n      alert('Contract not connected.');\n    }\n  };\n\n  // Function to withdraw ETH from the contract\n  const handleWithdraw = async () => {\n    if (contract) {\n      try {\n        const tx = await contract.withdraw();\n        await tx.wait();\n        alert('Withdrawal successful!');\n      } catch (error) {\n        console.error('Withdrawal error:', error);\n        alert('Withdrawal failed. Please try again.');\n      }\n    } else {\n      alert('Contract not connected.');\n    }\n  };\n\n  return (\n    <div className=\"connect-button-container\">\n      {address ? (\n        <>\n          <span className=\"connected-address\">Connected: {address}</span>\n          <button className=\"connect-button\" onClick={disconnect}>Disconnect</button>\n          <button className=\"connect-button\" onClick={handleDeposit}>Deposit 0.1 ETH</button>\n          <button className=\"connect-button\" onClick={handleWithdraw}>Withdraw</button>\n        </>\n      ) : (\n        <button className=\"connect-button\" onClick={connectToMetaMask}>Connect to MetaMask</button>\n      )}\n    </div>\n  );\n}\n\nexport default ConnectButton;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}